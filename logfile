2019-06-03 15:53:57.390 EEST [83782] LOG:  listening on IPv4 address "127.0.0.1", port 5432
2019-06-03 15:53:57.390 EEST [83782] LOG:  listening on IPv6 address "::1", port 5432
2019-06-03 15:53:57.392 EEST [83782] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2019-06-03 15:53:57.405 EEST [83783] LOG:  database system was shut down at 2019-06-03 15:53:23 EEST
2019-06-03 15:53:57.411 EEST [83782] LOG:  database system is ready to accept connections
2019-06-03 19:40:56.863 EEST [84869] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-03 19:40:58.191 EEST [84872] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-03 19:40:59.599 EEST [84875] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-04 13:34:48.855 EEST [88968] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-04 13:34:50.206 EEST [88973] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-04 13:34:51.771 EEST [88976] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-04 13:47:43.140 EEST [89402] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-04 13:47:44.372 EEST [89405] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-04 13:47:45.716 EEST [89408] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 12:41:28.880 EEST [93688] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 12:41:30.731 EEST [93691] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 12:41:32.386 EEST [93694] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 12:46:57.205 EEST [93588] ERROR:  syntax error at or near "tasks" at character 1
2019-06-05 12:46:57.205 EEST [93588] STATEMENT:  tasks=>
	tasks=> CREATE TABLE taskTable (ID SERIAL PRIMARY KEY, text STRING, checked BOOl,usersid NUMBER );
2019-06-05 12:49:32.475 EEST [93588] ERROR:  relation "tasktable" does not exist at character 13
2019-06-05 12:49:32.475 EEST [93588] STATEMENT:  INSERT INTO taskTable (text, checked, usersid) VALUES ('first', false, 1);
2019-06-05 12:50:14.681 EEST [93588] ERROR:  syntax error at or near "tasks" at character 1
2019-06-05 12:50:14.681 EEST [93588] STATEMENT:  tasks=> SELECT * FROM taskTable;
2019-06-05 12:51:27.813 EEST [93588] ERROR:  syntax error at or near "tasks" at character 1
2019-06-05 12:51:27.813 EEST [93588] STATEMENT:  tasks=>
	tasks=> CREATE TABLE taskTable (ID SERIAL PRIMARY KEY, text STRING, checked BOOl,usersid NUMBER );
2019-06-05 12:57:17.869 EEST [94179] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 12:57:19.365 EEST [94182] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 12:57:20.904 EEST [94185] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 13:00:41.367 EEST [94281] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 13:00:59.613 EEST [94331] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 13:01:01.086 EEST [94334] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 13:01:02.849 EEST [94337] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 13:03:53.183 EEST [94446] ERROR:  relation "tasks" does not exist at character 114
2019-06-05 13:03:53.183 EEST [94446] STATEMENT:  SELECT tasks.id as id, tasks.text, tasks.checked, tasks.createdat, username.id as usernameid, username.name FROM tasks  INNER JOIN u ON tasks.usernameid = u.s ORDER BY createdat DESC LIMIT 100;
2019-06-05 13:05:50.769 EEST [94557] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 13:05:52.311 EEST [94560] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 13:05:53.929 EEST [94563] FATAL:  database "viktoriakryvosheeva" does not exist
2019-06-05 13:06:27.389 EEST [94627] ERROR:  relation "tasks" already exists
2019-06-05 13:06:27.389 EEST [94627] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 13:06:27.414 EEST [94628] ERROR:  relation "u" does not exist at character 132
2019-06-05 13:06:27.414 EEST [94628] STATEMENT:  SELECT tasks.id as id, tasks.text, tasks.checked, tasks.createdat, username.id as usernameid, username.name FROM tasks  INNER JOIN u ON tasks.usernameid = u.s ORDER BY createdat DESC LIMIT 100;
2019-06-05 13:08:30.784 EEST [94747] ERROR:  relation "tasks" already exists
2019-06-05 13:08:30.784 EEST [94747] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 13:08:30.816 EEST [94748] ERROR:  relation "u" does not exist at character 132
2019-06-05 13:08:30.816 EEST [94748] STATEMENT:  SELECT tasks.id as id, tasks.text, tasks.checked, tasks.createdat, username.id as usernameid, username.name FROM tasks  INNER JOIN u ON tasks.usernameid = u.s ORDER BY createdat DESC LIMIT 100;
2019-06-05 13:21:14.947 EEST [94975] ERROR:  relation "tasks" already exists
2019-06-05 13:21:14.947 EEST [94975] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 13:21:14.971 EEST [94976] ERROR:  relation "u" does not exist at character 132
2019-06-05 13:21:14.971 EEST [94976] STATEMENT:  SELECT tasks.id as id, tasks.text, tasks.checked, tasks.createdat, username.id as usernameid, username.name FROM tasks  INNER JOIN u ON tasks.usernameid = u.s ORDER BY createdat DESC LIMIT 100;
2019-06-05 13:35:20.472 EEST [95346] ERROR:  relation "tasks" already exists
2019-06-05 13:35:20.472 EEST [95346] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 13:43:51.917 EEST [95636] ERROR:  relation "tasks" already exists
2019-06-05 13:43:51.917 EEST [95636] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 13:44:33.139 EEST [95721] ERROR:  relation "tasks" already exists
2019-06-05 13:44:33.139 EEST [95721] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 13:47:12.955 EEST [95898] ERROR:  relation "tasks" already exists
2019-06-05 13:47:12.955 EEST [95898] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 13:48:43.248 EEST [96013] ERROR:  relation "tasks" already exists
2019-06-05 13:48:43.248 EEST [96013] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 13:58:59.973 EEST [96277] ERROR:  relation "tasks" already exists
2019-06-05 13:58:59.973 EEST [96277] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 13:59:38.595 EEST [96314] ERROR:  relation "tasks" already exists
2019-06-05 13:59:38.595 EEST [96314] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 14:00:03.110 EEST [96350] ERROR:  relation "tasks" already exists
2019-06-05 14:00:03.110 EEST [96350] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 14:01:08.541 EEST [96413] ERROR:  relation "tasks" already exists
2019-06-05 14:01:08.541 EEST [96413] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 14:02:56.856 EEST [96532] ERROR:  relation "tasks" already exists
2019-06-05 14:02:56.856 EEST [96532] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 14:22:31.222 EEST [97353] ERROR:  database "todos" already exists
2019-06-05 14:22:31.222 EEST [97353] STATEMENT:  CREATE DATABASE todos;
2019-06-05 15:16:03.863 EEST [98174] ERROR:  relation "tasks" already exists
2019-06-05 15:16:03.863 EEST [98174] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 15:30:37.751 EEST [98469] ERROR:  relation "tasks" already exists
2019-06-05 15:30:37.751 EEST [98469] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 15:33:13.708 EEST [98654] ERROR:  relation "tasks" already exists
2019-06-05 15:33:13.708 EEST [98654] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 15:34:59.415 EEST [98725] ERROR:  relation "tasks" already exists
2019-06-05 15:34:59.415 EEST [98725] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 15:35:24.190 EEST [98753] ERROR:  relation "tasks" already exists
2019-06-05 15:35:24.190 EEST [98753] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 15:35:56.844 EEST [98789] ERROR:  relation "tasks" already exists
2019-06-05 15:35:56.844 EEST [98789] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 15:37:02.532 EEST [98863] ERROR:  relation "tasks" already exists
2019-06-05 15:37:02.532 EEST [98863] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 15:42:41.342 EEST [99075] ERROR:  relation "tasks" already exists
2019-06-05 15:42:41.342 EEST [99075] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 15:55:33.055 EEST [99429] ERROR:  relation "tasks" already exists
2019-06-05 15:55:33.055 EEST [99429] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 15:56:19.354 EEST [99486] ERROR:  relation "tasks" already exists
2019-06-05 15:56:19.354 EEST [99486] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 15:59:19.210 EEST [99637] ERROR:  relation "tasks" already exists
2019-06-05 15:59:19.210 EEST [99637] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:00:41.881 EEST [99716] ERROR:  relation "tasks" already exists
2019-06-05 16:00:41.881 EEST [99716] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:06:16.882 EEST [99830] ERROR:  syntax error at or near "INTO" at character 28
2019-06-05 16:06:16.882 EEST [99830] STATEMENT:  SELECT * FROM tasks
	INSERT INTO tasks (text, checked)
	    VALUES (‘first text’, false);
2019-06-05 16:06:58.038 EEST [99830] ERROR:  syntax error at or near "text’" at character 50
2019-06-05 16:06:58.038 EEST [99830] STATEMENT:  INSERT INTO tasks (text, checked) VALUES (‘first text’, false);
2019-06-05 16:07:29.626 EEST [99830] ERROR:  syntax error at or near "text’" at character 52
2019-06-05 16:07:29.626 EEST [99830] STATEMENT:  INSERT INTO tasks (text, checked)
	  VALUES (‘first text’, false);
2019-06-05 16:07:31.891 EEST [99830] ERROR:  syntax error at or near "text’" at character 52
2019-06-05 16:07:31.891 EEST [99830] STATEMENT:  INSERT INTO tasks (text, checked)
	  VALUES (‘first text’, false);
2019-06-05 16:11:24.520 EEST [116] ERROR:  relation "tasks" already exists
2019-06-05 16:11:24.520 EEST [116] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:11:34.178 EEST [116] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:11:34.178 EEST [116] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:11:42.909 EEST [116] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:11:42.909 EEST [116] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:16:30.413 EEST [375] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:16:30.413 EEST [375] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:17:25.390 EEST [423] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:17:25.390 EEST [423] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:22:45.854 EEST [99830] ERROR:  syntax error at or near "DROP" at character 18
2019-06-05 16:22:45.854 EEST [99830] STATEMENT:  DROP TABLE tasks
	DROP TABLE tasks
	drop table tasks
	drop table tasks
	drop table tasks;
2019-06-05 16:23:26.590 EEST [624] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:23:26.590 EEST [624] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:23:30.013 EEST [624] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:23:30.013 EEST [624] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:25:07.772 EEST [727] ERROR:  relation "tasks" already exists
2019-06-05 16:25:07.772 EEST [727] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:25:10.462 EEST [727] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:25:10.462 EEST [727] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:25:16.472 EEST [738] ERROR:  relation "tasks" already exists
2019-06-05 16:25:16.472 EEST [738] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:25:20.096 EEST [738] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:25:20.096 EEST [738] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:39:01.025 EEST [1345] ERROR:  relation "tasks" already exists
2019-06-05 16:39:01.025 EEST [1345] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:39:04.943 EEST [1345] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:39:04.943 EEST [1345] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:39:40.944 EEST [1389] ERROR:  relation "tasks" already exists
2019-06-05 16:39:40.944 EEST [1389] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:40:04.454 EEST [1389] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:40:04.454 EEST [1389] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:40:15.423 EEST [1430] ERROR:  relation "tasks" already exists
2019-06-05 16:40:15.423 EEST [1430] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:40:18.303 EEST [1430] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:40:18.303 EEST [1430] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 16:41:12.811 EEST [1478] ERROR:  relation "tasks" already exists
2019-06-05 16:41:12.811 EEST [1478] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:41:25.408 EEST [1500] ERROR:  relation "tasks" already exists
2019-06-05 16:41:25.408 EEST [1500] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:42:08.764 EEST [1563] ERROR:  relation "tasks" already exists
2019-06-05 16:42:08.764 EEST [1563] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:42:22.717 EEST [1574] ERROR:  relation "tasks" already exists
2019-06-05 16:42:22.717 EEST [1574] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 16:54:45.177 EEST [1826] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 16:54:45.177 EEST [1826] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 17:24:13.192 EEST [2299] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 17:24:13.192 EEST [2299] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 17:24:45.284 EEST [2335] ERROR:  relation "tasks" already exists
2019-06-05 17:24:45.284 EEST [2335] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 17:24:48.277 EEST [2335] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 17:24:48.277 EEST [2335] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 17:25:33.433 EEST [2374] ERROR:  relation "tasks" already exists
2019-06-05 17:25:33.433 EEST [2374] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 17:25:35.956 EEST [2374] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 17:25:35.956 EEST [2374] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 17:26:45.723 EEST [2387] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 17:26:45.723 EEST [2387] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 17:28:02.310 EEST [2428] ERROR:  relation "tasks" already exists
2019-06-05 17:28:02.310 EEST [2428] STATEMENT:  CREATE TABLE tasks (id serial primary key,text varchar(255), checked boolean default false,  createdat TIMESTAMP default now()); CREATE OR REPLACE FUNCTION notify_trigger_tasks() RETURNS trigger AS $$BEGIN IF (TG_OP = 'DELETE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || OLD.id || '}, { operation: "' || TG_OP || '"}]');RETURN old;ELSIF (TG_OP = 'INSERT') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; ELSIF (TG_OP = 'UPDATE') THEN PERFORM pg_notify('notify_trigger_tasks', '[{' || TG_TABLE_NAME || ':' || NEW.id || '}, { operation: "' || TG_OP || '"}]');RETURN new; END IF; END; $$ LANGUAGE plpgsql; CREATE TRIGGER watched_table_trigger AFTER INSERT OR DELETE OR UPDATE ON tasks FOR EACH ROW EXECUTE PROCEDURE notify_trigger_tasks();
2019-06-05 17:28:05.319 EEST [2428] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 17:28:05.319 EEST [2428] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 17:28:14.414 EEST [2428] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 17:28:14.414 EEST [2428] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
2019-06-05 17:30:28.818 EEST [2521] ERROR:  column "usersid" of relation "tasks" does not exist at character 35
2019-06-05 17:30:28.818 EEST [2521] STATEMENT:  INSERT INTO tasks (text, checked, usersid, createdAt) VALUES ($1, $2, $3, $4);
